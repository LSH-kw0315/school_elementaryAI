ㅁ시각화 팁

ㅇseaborn 라이브러리

-seaborn.load_dataset("데이터셋이름")으로 데이터셋을 가져올 수 있다. (예제용 기본 데이터셋이 있는 듯하다. 강의에서는 그것을 썼다.)

-seaborn.set_style("whitegrid") :흰색눈금이 나오도록 할 수가 있음.
(디폴트 스타일은 "white"다)

-seaborn.histplot(데이터프레임(시리즈),bins=...) 히스토그램(막대그래프)를 그릴 수 있다. bins는 막대기의 갯수다.

히스토그램도 x,y,data를 지정하는 방식을 사용할 수 있는데, 이러면 산점도 그래프와 비슷하게 출력된다.


-def lmplot(*, x=None, y=None, data=None, hue=None, col=None, row=None, palette=None, col_wrap=None, height=5, aspect=1, markers='o', sharex=None, sharey=None, hue_order=None, col_order=None, row_order=None, legend=True, legend_out=None, x_estimator=None, x_bins=None, x_ci='ci', scatter=True, fit_reg=True, ci=95, n_boot=1000, units=None, seed=None, order=1, logistic=False, lowess=False, robust=False, logx=False, x_partial=None, y_partial=None, truncate=True, x_jitter=None, y_jitter=None, scatter_kws=None, line_kws=None, facet_kws=None, size=None)
(소문자 L이다.)

산점도 그래프를 그릴 수 있는 함수다. 특징이 있다면 별다른 옵션없이 기본적인 옵션만 주면 회귀선을 그린다는 것이다.
만약 회귀선이 필요가 없다면 fit_reg=False를 주도록 하자.

기본적으로는 이변량 그래프이다. 옵션의 추가를 통해 다변량 그래프를 만들어보자.

data는 그래프를 그리는 데 사용할 데이터프레임, 
x는 그래프 전체의 x축으로 사용할 시리즈, 
y는 그래프 전체의 y축에 나타낼 시리즈, 
hue는 산점도에서 점의 색으로 구분지어지는 시리즈(보통 성별같은 것을 여기 넣는다. ),
row는 그래프의 한 행 한 행을 구분할 때 사용할 시리즈,
col은 그래프의 한 열 한 열을 구분할 때 사용할 시리즈다.

이렇게 해서 다변량 그래프를 그릴 수 있다. (여러개의 산점도 그래프를 보여준다.)

ex) 그래프들의 x축에 전체 지불 금액, y축에는 팁을 나타낸다.
그리고 한 행은 같은 시간대를 나타내고, 한 열은 흡연자/비흡연자 여부를 나타낸다. 
그리고 점의 색깔은 여성/남성을 나타낸다.

-산점도와 히스토그램을 한 번에 표현하는 jointgrid를 그릴 수도 있다.
seaborn.jointplot(x='total_bill',y='tip',data=tips,kind='hex') 이런 식으로.
히스토그램의 장점인 값의 고저를 알기 쉽다는 점을 활용할 수가 있다.
산점도 그래프(scatter)와 옵션에서 다른 점은 딱히 없으나, 다른 점은 산점도의 점을 도형으로 지정할 수 있다. kind를 통해.
(밀도를 정확히 알기 위해서 점의 도형을 지정할 수 있는 것.)

-seaborn.kdeplot(시리즈)
밀도 함수 그래프를 그릴 수 있다. (흔히 말하는 정규 분포 형태의 그래프를 말한다.)
하지만 기본적으로 시리즈 하나만 달랑 주면 매끄러운 막대그래프에 불과하다.

그래서, 매개변수로 줄 수 있는 옵션은 다음과 같다.
x : x값을 지정해 줄 수 있다.(데이터를 지정한 경우)
y : y값을 지정해 줄 수 있다.(데이터를 지정한 경우)
data : x,y에 쓰이는 시리즈를 지정해 줄 수 있다.
shade : 참/거짓 값을 대입한다. 등고선(?) 형태로 그래프를 보여주게 된다.

이러면 이변량 그래프를 그릴 수 있다.

-seaborn.countplot(시리즈)
막대그래프와 비슷하다. 다만 각각의 인덱스(?)에 대해 구분이 되게 자동으로 색을 입혀준다.

-seaborn.barplot(x=,y=,data=)
평균막대 그래프를 그려준다.

x : x값으로 할 시리즈
y : y값으로 할 시리즈
data : x,y 값으로 사용할 시리즈를 가져올 데이터프레임

x를 time, y를 tip으로 두고 봤을 때 산점도에서는 빈도수를 알 수가 있었다면, 이 그래프에서는 그 시간대의 평균적인 팁가격대를 알 수가 있다.
(평균막대그래프)

-seaborn.boxplot(x=,y=,data=,hue=)

https://newsjel.ly/archives/newsjelly/14177 <이게 뭐하는 그래프인지 알 수 있다.

강사 曰
박스의 중간선은 중간값, 박스 맨위의 선은 상위25%, 박스 맨아래의 선은 하위25%이다. 
그리고 박스를 넘어 위에까지 뻗은 선은 upper fence로 통계적으로 봤을 때 허용되는 상한을 말한다.
그리고 뻗은 선을 넘어서 존재하는 점은 통계에는 있으나 통계적으로 말이 안되는 수치를 표현한다.
주로 이상한 수치를 알고자 할 때 쓰인다.

x : x값으로 할 시리즈
y : y값으로 할 시리즈
data : x,y 값으로 사용할 시리즈를 가져올 데이터프레임
hue : 색으로 구분할 시리즈(주로 성별이나 어쨌든 두가지로 나눌 수 있는 것에 자주 쓰이는 모양.) 

보면 다변량 그래프인데, 박스그래프를 그릴 수가 있다. 중간값, 유의미한 최대/최소, 이상하리만치 높거나 낮은 값을 알 수 있다.

-seaborn.violinplot(x=,y=,data=,hue=)

https://hleecaster.com/python-seaborn-violinplot/ <뭐하는 그래프인지 알 수 있다.

강사曰: 박스 그래프에서 밀집도를 알기 위한 목적이라곤 하나 이상수치를 알 수 없음.

x : x값으로 할 시리즈
y : y값으로 할 시리즈
data : x,y 값으로 사용할 시리즈를 가져올 데이터프레임
hue : 색으로 구분할 시리즈(주로 성별이나 어쨌든 두가지로 나눌 수 있는 것에 자주 쓰이는 모양.) 

밀도 함수 그래프와 박스 그래프를 합쳐놓은 것이라고 보면된다.

-seaborn.pairplot(데이터프레임,hue=)

hue : 색으로 구분할 데이터 프레임의 시리즈의 이름(성별이 대표적으로 이렇게 구분하기 좋은 값일 것이다.)

시리즈로 구분되는 데이터들 각각의 상관관계를 그래프 여러개로 표시한다. (밀도함수, 산점도, 히스토그램 등..)
다만 x,y만 바뀐 그래프인, 그러니까 까보면 별다른 거 없는 그래프도 있다.

ㅇmatplot

-matplotlib.pyplot.xticks(['값'])
이러면 x값 레이블에 대표적으로 찍힐 값을 설정할 수가 있다.

-데이터프레임(시리즈).plot.hist(bins=,alpha=)
bins: 막대 갯수
alpha : 막대 투명도
pandas로 간단하게 막대 그래프를 그릴 수 있다.

ㅇpandas

-데이터프레임(시리즈).plot.box()

pandas로 박스 그래프를 그려볼 수 있다.

데이터 시각화를 해보면 한 눈에 데이터의 추이가 보이므로, 원인 파악하기가 더 간단해진다.

---------

tip)시리즈를 묶어서 넣어야할 때에는 리스트에 넣어야한다.

ㅁpandas.concat([데이터프레임 or 시리즈])

데이터 프레임이나 시리즈를 종 방향으로 합친다.(디폴트)

매개변수로는 ignore_index가 있다. 이것을 ignore_index=True로 설정할 경우 기존에 인자로 준 데이터 프레임이나 시리즈의 행 번호는 무시하고,
새롭게 합쳐지는 데이터 프레임(시리즈) 기준으로 다시 센 기준으로 합친다. 

또 매개변수로는 axis가 있다. 이것을 axis=1로 설정할 경우 횡방향으로 데이터프레임(시리즈)를 합친다.

종방향으로 합치건, 횡방향으로 합치건, 없던 행이나 없던 열의 id(?)가 있더라도 알아서 NaN값까지 끼어서 열이나 행을 추가로 만들어 합친다.

중복은 고려하지 않고 합친다는 점이 중요.

ㅁdataFrame.merge(데이터프레임,left_on="site",right_on="name")

원래 그냥 합치면 없는 id값은 그냥 그대로 추가되고 NaN값으로 합쳐지지만, 이걸 쓰면 관련된 데이터를 고려하여 합친다. 이걸 사용할 때는 관련된 데이터, 즉 기준으로 할 열을 무조건 설정해주어야 한다.

호출하는 데이터 프레임의 열id는 left_on이고, right_on은 매개변수의 인자로 준 데이터 프레임의 열id이다.

기준열의 이름이 같다면 on="기준열"에 넣으면 된다.

ㅁpandas.melt(데이터프레임,id_var=,var_name=,value_name=)  or 데이터프레임.melt(id_var=,var_name=,value_name=)

행로 늘어진 것을 열로 늘어뜨린다는 느낌이다. id_var는 바뀌지 않을 id, var_name은 행id들로 구성된 열에 붙을 이름,value_name은 행id에 value에 해당하는 것에 붙을 이름이다.

pew, billboard를 참고하자.

참으로 신기하게도 늘어뜨린 열에 대해서 id_var로 고정시킨 열이 대응된다.

ㅁpandas.pivot_table(데이터프레임, index=,columns=,values=) or 데이터프레임.pivot_table(index=,columns=,values=)
열로 늘어진 것을 행으로 늘어뜨린다는 느낌이다.(melt와는 반대다.)

index는 바뀌지 않을 id, columns는 행으로 늘어뜨릴 id, values는 value에 해당하는 것에 붙을 이름이다.
.
reset_index()

ㅁ누락값을 처리하는 방법

데이터 프레임마다 누락값의 처리 방법은 데이터의 성격에 따라 가지각색이다.

내 교실 학생들의 키 데이터같은 건 전체의 평균으로 처리할 수도 있고,

내 교실 학생들의 부모 소득 데이터의 경우 전체의 중앙값으로 처리할 수도 있다.

시계열에 따라 값이 변하는 데이터인 경우에는 직전값과 직후값의 평균이나, 아니면 직전값과 직후값을 그대로 가지는 등으로 처리한다.

누락값 NaN은 numpy의 nan으로 사용할 수 있다. 하지만, ==를 통해 nan 값인지 아닌지을 비교하는 것은 불가능하다.

ex)nan==True, nan==False 해보면 둘 다 False를 뱉어내는 것을 알 수 있다.

비교하는 방법 중 하나는 pandas의 isnull 함수를 활용하는 것이다. pandas.isnull(nan)은 True가 반환된다.

데이터프레임(시리즈)의 NaN값을 일괄적으로 채우려면...

1. fillna 함수를 사용하면 된다.
형태: 데이터프레임(시리즈).fillna(value)

method라는 매개변수가 존재하는데, method="ffill"은 front fill이란 뜻이다. 앞의 것으로 채운다.
method="bfill"은 back fill이란 뜻이다. 뒤의 것으로 채운다.

filna 말고도 NaN을 채우는 방법은 있다.

2. interpolate 함수를 사용하는 방법이다.
형태 : 데이터프레임(시리즈).interpolate()

데이터의 흐름에 맞게 NaN 값을 채우는 함수이다. 다만 디폴트 동작은 인덱스 개수에 맞게 채우는 것이기 때문에 다소 부자연스러워 보일 수 있다.

따라서 여기에도 method라는 매개변수가 존재한다.

method="time"을 쓰면 인덱스가 시간인 경우 시간의 흐름에 맞게 채운다.

ㅁ데이터프레임(시리즈)의 데이터 타입

object형을 category형으로 바꿔주면 성능의 향상에 도움이 된다. (기능에는 문제가 없지만.)
(category형을 쓰면 포인터마냥 가리키는 식으로 바꾸어 성능의 향상에 도움을 줌)

그리고 타입을 바꾸고 싶다면 시리즈.astype('타입') 이렇게 쓰면 된다.

다만 이건 타입을 바꿀 수 없을 때 강제로 바꿀 수가 없다. (한 열에 숫자가 없는 문자열 데이터가 하나라도 끼어있을 때)

그럴 때..

pandas.to_numeric(데이터프레임(시리즈),errors="coerce")

이러면 변환 안되는 건 NaN으로 바꾸고 강제로 타입을 바꿔버린다.

이것은 바뀐 시리즈를 반환하므로, 데이터프레임에 반영하고 싶으면

dataframe['시리즈']=pandas.to_numeric((시리즈),errors="coerce")

만약 NaN 값이 있는 행을 지워버리고 싶다면...

데이터프레임(시리즈).dropna() 를 사용하면 된다.


tip)데이터프레임(시리즈).head(val)은 상위 val개를 반환해준다.

ㅁ엑셀 열기 팁

엑셀을 열 때는 sheet를 지정해주어야 한다. (디폴트가 0이라 지정안할때 못 불러올 수도 있음. 불러올 수도 있고. 보통은 None으로 많이들 하는듯?)

pandas.read_excel("엑셀파일",sheet_name="Sheet(숫자)")

그 외 매개변수가 좀 많이 있다.

header는 header부터 얼마나 떨어진 곳에서부터 먼저 읽을지 결정한다
usecols는 사용할 열의 범위를 정할 수 있다.
skipfooter는 footer로부터 얼마나 떨어진 곳까지 skip할지 결정한다.

str팁 : zfill(n)을 하면 n글자가 되도록 앞을 0으로 채우게 된다.

ㅁ시리즈 다루기 팁

시리즈.str 이렇게 str을 활용하면 시리즈에 문자열 함수를 사용할 수가 있다. (split, replace 등등...)

다만 이런 문자열 함수의 결과는 시리즈다. split의 한 시리즈를 보고 싶다면 시리즈.str[0] 이런식으로 볼 수 있다.

문자열 길이를 보고 싶으면 시리즈.str.len() 이렇게 적자.

numpy의 sum 함수는 시리즈에도 쓸 수 있다. value를 합해주는 함수로, 매개변수로 axis를 사용할 수가 있다. axis=0은 종방향, axis=1은 횡방향 연산한다.

rank는 순위를 매겨주는 함수다. 
매개변수엔 method, ascending이 있다.
ascending은 높은 사람이 수치적으로 높은 값을 가지도록 한다. (True인 경우)
method에는 dense, first, max, min, average를 쓸 수가 있다.

sort_value는 시리즈의 값을 정렬해주는 함수다.
매개변수엔 by, ascending이 있다.
ascending은 오름차순 정렬을 하도록 한다.(True인 경우)
by는 정렬할 기준을 정한다. (시리즈 id 중 하나.)

데이터프레임[시리즈].unique() 하면은 중복없는 시리즈의 모든 데이터를 볼 수가 있다.
