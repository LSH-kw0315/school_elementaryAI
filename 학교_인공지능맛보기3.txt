ㅁ데이터 크롤링 팁

-크롤링할 때는 천천히 크롤링을 해야된다. (1초에 n회 수준이 되면 IP밴 당한다.)

-리스폰스 코드 
200 : 정상적으로 가져옴
400 : 존재하지 않는 페이지
500 : 존재하지만 거절됨

-크롬에서 요소에 마우스 오른쪽 클릭 - 검사를 누르면 크롬 개발자 도구에 바로 그 요소가 HTML 문서 어디에 있는지 뜬다.

-BeautifulSoup의 find 함수의 매개변수로 줄 수 있는 옵션에는 attrs= 이 있는데,
attrs={"어트리뷰트":"값",..} 이렇게 딕셔너리로 어트리뷰트를 줄 수 있고, 클래스도 이에 해당한다.

-클래스만 활용해서 찾는다면 find 함수의 매개변수로 class_=가 있다.

-크롤링 할 때 리퀘스트, 리스폰스 받는 건 requests 라이브러리를 쓰는 게 더 편해보인다.

-리스트 형태의 원소를 순회하면서 어떠한 함수의 처리를 해야한다면..
map(함수,리스트형태의자료구조)
이렇게 처리해주면 된다. 이것은 인자로 준 자료구조의 원본을 바꾸는 함수는 아니다.
따라서 함수의 처리에 의해 바뀐 자료구조로 원본을 바꾸고 싶다면...
원본=map(함수,자료구조)
이러면 된다. (만약 캐스팅이 필요하면 map에 캐스팅하면 된다.)

-보통 html에서 표 전체는 table 태그로 관리한다

-BeautifulSoup로 얻은 html은 str로 캐스팅 하는 것으로 html태그들을 문자열로 만들 수가 있다. 

-pandas.read_html(html문자열)
이렇게 해서 table 형태의 html 태그를 데이터프레임으로 만들 수가 있다.
근데 이것의 반환값은 데이터프레임 list다. 따라서, html태그에 table이 하나만 존재한다면 첫 번째 것을 가져와야 데이터프레임만 얻을 수 있다.

-데이터프레임[시리즈].notnull()
notnull()함수는 null이 아니면 true를 반환한다. (isnull과는 반대다.)

-BeautifulSoup에서 태그의 어트리뷰트에 접근하려면 []로 접근할 수가 있다.
(딕셔너리 접근하듯이 하면 된다.)

-배열 슬라이싱할 때 -n은 뒤에서 n번째라는 의미다.

-tqdm 라이브러리에 tqdm 함수를 사용하면 for문의 진행상황을 확인할 수 있다.

용법은 다음과 같다.

for n in tqdm(range(1,kospi_page+1):
    코드...

-엑셀 활용팁

시리즈 id를 드래그해서 우측상단의 필터를 누르면 필터 기능을 사용가능하다.

-보통 크롤링할 때 User-Agent 때문에 서버에서 데이터 제공을 거부하는 경우가 많다.
그래서 이 User-Agent를 일반 사용자로 보이게끔 속여야한다.  

user-agent macintosh를 검색하자. 그러면 적당히 user-agent를 찾아볼 수 있다.

그리고 딕셔너리를 만들어 dict={"User-Agent" : "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0)"}
이런 식으로 변수를 만든다.

그리고...
url=requests.get('링크',headers=useragent)
이렇게 headers에 대입하면 된다.

ㅁ빈도분석, 워드클라우드, 감성분석

tip) 네이버는 어떤 종류의 정보건 400페이지만 보여준다.

ㅇ정규표현식

빈도분석을 하기 위해서는 정규표현식을 사용해야한다.
파이썬에서는 re 라이브러리에서 정규표현식을 사용할 수 있다.

-re.findall("패턴",t)
패턴이 있는 텍스트를 모두 찾아 리스트로 반환함.
[a-z] : a~z 중에서, 그 한 글자로만 이뤄진 것을 전부 찾는다.
[a-z]+ : a~z가 한 글자 이상 포함된 텍스트를 찾는다.
[a-zA-Z]+ : a~z, A~Z가 한글자 이상 포함된 텍스트를 찾는다.
[0-9]+ : 숫자가 하나 이상 포함된 텍스트를 찾는다.
[가-힣]+ : 한글이 하나 이상 포함된 텍스트를 찾는다.

이 때, find의 기준은 공백이다. (즉, 단어 단위로 패턴을 적용하여 찾는다는 말이다.)

[a-zA-Z0-9가-힣]+ 패턴을 통해 의미있는 워드를 빼낼 수가 있다.

딕셔너리를 이용하여 빈도분석을 할 수가 있다.
dic={}
for i in words:
    if i not in dic:
        dic[i]=1
    else:
        dic[i]+=1

대략 이런 식으로.

ㅁ워드클라우드 만들기
tip ) 한글 지원이 되는 무료 폰트(상업적 이용도 무료)인 배달의민족 도현체를 잘 써먹어보자.


내가 팀프할 때 썼던 wordcloud 라이브러리를 활용하자.
from wordcloud import WordCloud

그리고 딕셔너리로 빈도 분석을 한 걸 통해 시각화를 하려면...
wc=WordCloud(font_path='/content/...",background_color="white") #한글 폰트가 필요함.
cloud=wc.genearte_from_frequencies(dic)
plt.imshow(cloud)

시각화된 자료에 대한 팁이 있다면, 일단 자료를 보고 조금 의미가 없어 보이는 걸 지워야 한다는 점이다.

이미지를 다루려면 PIL(피아이엘) 라이브러리가 필요하다. 
from PIL import Image

이미지 tip : 이미지의 픽셀값은 0~255가 있다. (흰색:255 , 검은색:0) 만약 마스크를 쓰고 싶다면 0 혹은 255로만 이뤄진 파일을 사용하는 것이 좋다.

그리고 이미지를 컴퓨터가 다룰 수 행렬로 바꾸기 위해서는 numpy가 필요하다. 
PIL의 Image에 있는 함수 open의 반환 값을 받은 image 변수를...
numpy.array(image)
numpy의 array 함수의 인자로 넣으면 각 픽셀이 행렬로 반환된 배열을 받을 수가 있고...
이것을 WordCloud 생성자의 mask= 매개변수에 넣으면 된다.

최종적으론 이렇다.


img=Image.open('하트.png')
img=np.array(img)
wc=WordCloud(font_path='/content/BMDOHYEON_ttf.ttf',background_color='white',mask=img)
cloud=wc.generate_from_frequencies(dic)
plt.imshow(cloud)
